!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
B	fixname	/^$/;"	v
CHAR_SEPARATOR	inode.hpp	8;"	d
DIRECTORY_H	directory.hpp	2;"	d
DIR_ROOT	inode.hpp	7;"	d
Directory	directory.cpp	/^Directory::Directory( std::string path ) $/;"	f	class:Directory	signature:( std::string path )
Directory	directory.hpp	/^	Directory( std::string path ) $/;"	p	class:Directory	access:public	signature:( std::string path )
Directory	directory.hpp	/^class Directory : public iNode$/;"	c	inherits:iNode
Directory::Directory	directory.cpp	/^Directory::Directory( std::string path ) $/;"	f	class:Directory	signature:( std::string path )
Directory::Directory	directory.hpp	/^	Directory( std::string path ) $/;"	p	class:Directory	access:public	signature:( std::string path )
Directory::getChildren	directory.cpp	/^std::list<iNode> Directory::getChildren( bool all ) const$/;"	f	class:Directory	signature:( bool all ) const
Directory::getChildren	directory.hpp	/^	std::list<iNode> getChildren( bool all = false ) const;$/;"	p	class:Directory	access:public	signature:( bool all = false ) const
Directory::isDirectory	directory.cpp	/^bool Directory::isDirectory( std::string path )$/;"	f	class:Directory	signature:( std::string path )
Directory::isDirectory	directory.hpp	/^	static bool isDirectory( std::string path );$/;"	p	class:Directory	access:public	signature:( std::string path )
FIXNAME_HPP	fixname.hpp	2;"	d
FLG_ALL	fixname.hpp	9;"	d
FLG_DIRECTORY	fixname.hpp	10;"	d
FLG_FORCE	fixname.hpp	12;"	d
FLG_IGNORE	fixname.hpp	13;"	d
FLG_RECURSIVE	fixname.hpp	11;"	d
FLG_VERBOSE	fixname.hpp	14;"	d
FixName	fixname.cpp	/^	FixName::FixName( std::string path, Flags flag )$/;"	f	class:fixname::FixName	signature:( std::string path, Flags flag )
FixName	fixname.hpp	/^		FixName( std::string path, Flags flag )$/;"	p	class:fixname::FixName	access:public	signature:( std::string path, Flags flag )
FixName	fixname.hpp	/^	class FixName$/;"	c	namespace:fixname
Flags	fixname.hpp	/^	typedef int Flags;$/;"	t	namespace:fixname
G	directory.o	/^f/;"	v
INODE_HPP	inode.hpp	2;"	d
Statistics	fixname.hpp	/^	struct Statistics{$/;"	s	namespace:fixname
U	fixname.o	/^/;"	v
_	directory.o	/^\\/;"	v
_x	directory.o	/^ÜE/;"	v
c	fixname.o	/^/;"	v
directory	inode.hpp	/^	bool directory;$/;"	m	class:iNode	access:private
exists	inode.cpp	/^bool iNode::exists( std::string path )$/;"	f	class:iNode	signature:( std::string path )
exists	inode.hpp	/^	static bool exists( std::string path );$/;"	p	class:iNode	access:public	signature:( std::string path )
filesError	fixname.hpp	/^		int filesError;$/;"	m	struct:fixname::Statistics	access:public
filesIgnored	fixname.hpp	/^		int filesIgnored;$/;"	m	struct:fixname::Statistics	access:public
filesOk	fixname.hpp	/^		int filesOk;$/;"	m	struct:fixname::Statistics	access:public
filesRenamed	fixname.hpp	/^		int filesRenamed;$/;"	m	struct:fixname::Statistics	access:public
fix	fixname.cpp	/^	Statistics FixName::fix()$/;"	f	class:fixname::FixName	signature:()
fix	fixname.hpp	/^		Statistics fix();$/;"	p	class:fixname::FixName	access:public	signature:()
fixiNode	fixname.cpp	/^	void FixName::fixiNode( iNode &node )$/;"	f	class:fixname::FixName	signature:( iNode &node )
fixiNode	fixname.hpp	/^		void fixiNode( iNode &node );$/;"	p	class:fixname::FixName	access:private	signature:( iNode &node )
fixname	fixname.cpp	/^namespace fixname$/;"	n	file:
fixname	fixname.hpp	/^namespace fixname$/;"	n
fixname::FixName	fixname.hpp	/^	class FixName$/;"	c	namespace:fixname
fixname::FixName::FixName	fixname.cpp	/^	FixName::FixName( std::string path, Flags flag )$/;"	f	class:fixname::FixName	signature:( std::string path, Flags flag )
fixname::FixName::FixName	fixname.hpp	/^		FixName( std::string path, Flags flag )$/;"	p	class:fixname::FixName	access:public	signature:( std::string path, Flags flag )
fixname::FixName::fix	fixname.cpp	/^	Statistics FixName::fix()$/;"	f	class:fixname::FixName	signature:()
fixname::FixName::fix	fixname.hpp	/^		Statistics fix();$/;"	p	class:fixname::FixName	access:public	signature:()
fixname::FixName::fixiNode	fixname.cpp	/^	void FixName::fixiNode( iNode &node )$/;"	f	class:fixname::FixName	signature:( iNode &node )
fixname::FixName::fixiNode	fixname.hpp	/^		void fixiNode( iNode &node );$/;"	p	class:fixname::FixName	access:private	signature:( iNode &node )
fixname::FixName::flags	fixname.hpp	/^		Flags flags;$/;"	m	class:fixname::FixName	access:private
fixname::FixName::getValidName	fixname.cpp	/^	string FixName::getValidName( std::string fileName )$/;"	f	class:fixname::FixName	signature:( std::string fileName )
fixname::FixName::getValidName	fixname.hpp	/^		std::string getValidName( std::string fileName );$/;"	p	class:fixname::FixName	access:private	signature:( std::string fileName )
fixname::FixName::mainNode	fixname.hpp	/^		iNode *mainNode;$/;"	m	class:fixname::FixName	access:private
fixname::FixName::promptFile	fixname.cpp	/^	bool FixName::promptFile( std::string newName )$/;"	f	class:fixname::FixName	signature:( std::string newName )
fixname::FixName::promptFile	fixname.hpp	/^		bool promptFile( std::string fileName );$/;"	p	class:fixname::FixName	access:private	signature:( std::string fileName )
fixname::FixName::scanDir	fixname.cpp	/^	void FixName::scanDir( Directory &d )$/;"	f	class:fixname::FixName	signature:( Directory &d )
fixname::FixName::scanDir	fixname.hpp	/^		void scanDir( Directory &d );$/;"	p	class:fixname::FixName	access:private	signature:( Directory &d )
fixname::FixName::stats	fixname.hpp	/^		Statistics stats;$/;"	m	class:fixname::FixName	access:private
fixname::FixName::verbose	fixname.cpp	/^	void FixName::verbose( std::string text, bool error )$/;"	f	class:fixname::FixName	signature:( std::string text, bool error )
fixname::FixName::verbose	fixname.hpp	/^		void verbose( std::string text, bool error = false );$/;"	p	class:fixname::FixName	access:private	signature:( std::string text, bool error = false )
fixname::FixName::~FixName	fixname.hpp	/^		~FixName();$/;"	p	class:fixname::FixName	access:public	signature:()
fixname::Flags	fixname.hpp	/^	typedef int Flags;$/;"	t	namespace:fixname
fixname::Statistics	fixname.hpp	/^	struct Statistics{$/;"	s	namespace:fixname
fixname::Statistics::filesError	fixname.hpp	/^		int filesError;$/;"	m	struct:fixname::Statistics	access:public
fixname::Statistics::filesIgnored	fixname.hpp	/^		int filesIgnored;$/;"	m	struct:fixname::Statistics	access:public
fixname::Statistics::filesOk	fixname.hpp	/^		int filesOk;$/;"	m	struct:fixname::Statistics	access:public
fixname::Statistics::filesRenamed	fixname.hpp	/^		int filesRenamed;$/;"	m	struct:fixname::Statistics	access:public
fixname::Statistics::totalFiles	fixname.hpp	/^		int totalFiles;$/;"	m	struct:fixname::Statistics	access:public
flags	fixname.hpp	/^		Flags flags;$/;"	m	class:fixname::FixName	access:private
getAbsolutePath	inode.cpp	/^std::string iNode::getAbsolutePath() const$/;"	f	class:iNode	signature:() const
getAbsolutePath	inode.hpp	/^	std::string getAbsolutePath() const;$/;"	p	class:iNode	access:public	signature:() const
getChildren	directory.cpp	/^std::list<iNode> Directory::getChildren( bool all ) const$/;"	f	class:Directory	signature:( bool all ) const
getChildren	directory.hpp	/^	std::list<iNode> getChildren( bool all = false ) const;$/;"	p	class:Directory	access:public	signature:( bool all = false ) const
getName	inode.cpp	/^std::string iNode::getName() const$/;"	f	class:iNode	signature:() const
getName	inode.hpp	/^	std::string getName() const;$/;"	p	class:iNode	access:public	signature:() const
getParent	inode.cpp	/^std::string iNode::getParent() const$/;"	f	class:iNode	signature:() const
getParent	inode.hpp	/^	std::string getParent() const;$/;"	p	class:iNode	access:public	signature:() const
getRelativePath	inode.cpp	/^std::string iNode::getRelativePath() const$/;"	f	class:iNode	signature:() const
getRelativePath	inode.hpp	/^	std::string getRelativePath() const;$/;"	p	class:iNode	access:public	signature:() const
getValidName	fixname.cpp	/^	string FixName::getValidName( std::string fileName )$/;"	f	class:fixname::FixName	signature:( std::string fileName )
getValidName	fixname.hpp	/^		std::string getValidName( std::string fileName );$/;"	p	class:fixname::FixName	access:private	signature:( std::string fileName )
h	fixname	/^? /;"	v
iNode	inode.cpp	/^iNode::iNode( std::string path ) $/;"	f	class:iNode	signature:( std::string path )
iNode	inode.hpp	/^	iNode( std::string path )$/;"	p	class:iNode	access:public	signature:( std::string path )
iNode	inode.hpp	/^class iNode$/;"	c
iNode::directory	inode.hpp	/^	bool directory;$/;"	m	class:iNode	access:private
iNode::exists	inode.cpp	/^bool iNode::exists( std::string path )$/;"	f	class:iNode	signature:( std::string path )
iNode::exists	inode.hpp	/^	static bool exists( std::string path );$/;"	p	class:iNode	access:public	signature:( std::string path )
iNode::getAbsolutePath	inode.cpp	/^std::string iNode::getAbsolutePath() const$/;"	f	class:iNode	signature:() const
iNode::getAbsolutePath	inode.hpp	/^	std::string getAbsolutePath() const;$/;"	p	class:iNode	access:public	signature:() const
iNode::getName	inode.cpp	/^std::string iNode::getName() const$/;"	f	class:iNode	signature:() const
iNode::getName	inode.hpp	/^	std::string getName() const;$/;"	p	class:iNode	access:public	signature:() const
iNode::getParent	inode.cpp	/^std::string iNode::getParent() const$/;"	f	class:iNode	signature:() const
iNode::getParent	inode.hpp	/^	std::string getParent() const;$/;"	p	class:iNode	access:public	signature:() const
iNode::getRelativePath	inode.cpp	/^std::string iNode::getRelativePath() const$/;"	f	class:iNode	signature:() const
iNode::getRelativePath	inode.hpp	/^	std::string getRelativePath() const;$/;"	p	class:iNode	access:public	signature:() const
iNode::iNode	inode.cpp	/^iNode::iNode( std::string path ) $/;"	f	class:iNode	signature:( std::string path )
iNode::iNode	inode.hpp	/^	iNode( std::string path )$/;"	p	class:iNode	access:public	signature:( std::string path )
iNode::isDirectory	inode.cpp	/^bool iNode::isDirectory() const$/;"	f	class:iNode	signature:() const
iNode::isDirectory	inode.hpp	/^	bool isDirectory() const;$/;"	p	class:iNode	access:public	signature:() const
iNode::name	inode.hpp	/^	std::string name;$/;"	m	class:iNode	access:private
iNode::parent	inode.hpp	/^	std::string parent;$/;"	m	class:iNode	access:private
iNode::rename	inode.cpp	/^bool iNode::rename( std::string newName, bool overwrite ) $/;"	f	class:iNode	signature:( std::string newName, bool overwrite )
iNode::rename	inode.hpp	/^	bool rename( std::string newName, bool overwrite = false )$/;"	p	class:iNode	access:public	signature:( std::string newName, bool overwrite = false )
iNode::settingPathsHelper	inode.cpp	/^void iNode::settingPathsHelper( std::string path )$/;"	f	class:iNode	signature:( std::string path )
iNode::settingPathsHelper	inode.hpp	/^	void settingPathsHelper( std::string path );$/;"	p	class:iNode	access:private	signature:( std::string path )
isDirectory	directory.cpp	/^bool Directory::isDirectory( std::string path )$/;"	f	class:Directory	signature:( std::string path )
isDirectory	directory.hpp	/^	static bool isDirectory( std::string path );$/;"	p	class:Directory	access:public	signature:( std::string path )
isDirectory	inode.cpp	/^bool iNode::isDirectory() const$/;"	f	class:iNode	signature:() const
isDirectory	inode.hpp	/^	bool isDirectory() const;$/;"	p	class:iNode	access:public	signature:() const
j	directory.o	/^\\/;"	v
main	main.cpp	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
mainNode	fixname.hpp	/^		iNode *mainNode;$/;"	m	class:fixname::FixName	access:private
name	inode.hpp	/^	std::string name;$/;"	m	class:iNode	access:private
parent	inode.hpp	/^	std::string parent;$/;"	m	class:iNode	access:private
promptFile	fixname.cpp	/^	bool FixName::promptFile( std::string newName )$/;"	f	class:fixname::FixName	signature:( std::string newName )
promptFile	fixname.hpp	/^		bool promptFile( std::string fileName );$/;"	p	class:fixname::FixName	access:private	signature:( std::string fileName )
qn	directory.o	/^n:/;"	v
rename	inode.cpp	/^bool iNode::rename( std::string newName, bool overwrite ) $/;"	f	class:iNode	signature:( std::string newName, bool overwrite )
rename	inode.hpp	/^	bool rename( std::string newName, bool overwrite = false )$/;"	p	class:iNode	access:public	signature:( std::string newName, bool overwrite = false )
scanDir	fixname.cpp	/^	void FixName::scanDir( Directory &d )$/;"	f	class:fixname::FixName	signature:( Directory &d )
scanDir	fixname.hpp	/^		void scanDir( Directory &d );$/;"	p	class:fixname::FixName	access:private	signature:( Directory &d )
settingPathsHelper	inode.cpp	/^void iNode::settingPathsHelper( std::string path )$/;"	f	class:iNode	signature:( std::string path )
settingPathsHelper	inode.hpp	/^	void settingPathsHelper( std::string path );$/;"	p	class:iNode	access:private	signature:( std::string path )
stats	fixname.hpp	/^		Statistics stats;$/;"	m	class:fixname::FixName	access:private
totalFiles	fixname.hpp	/^		int totalFiles;$/;"	m	struct:fixname::Statistics	access:public
v	fixname.o	/^/;"	v
verbose	fixname.cpp	/^	void FixName::verbose( std::string text, bool error )$/;"	f	class:fixname::FixName	signature:( std::string text, bool error )
verbose	fixname.hpp	/^		void verbose( std::string text, bool error = false );$/;"	p	class:fixname::FixName	access:private	signature:( std::string text, bool error = false )
~FixName	fixname.hpp	/^		~FixName();$/;"	p	class:fixname::FixName	access:public	signature:()
